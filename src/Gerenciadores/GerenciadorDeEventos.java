package Gerenciadores;

import Evento.Superclasse.Evento;
import Personagem.Superclasse.Personagem;
import Ambiente.Superclasse.Ambiente;
import Criatura.Subclasses.MorcegoGigante;
import Criatura.Subclasses.RatoMutante;
import Criatura.Subclasses.Cobra;
import Criatura.Subclasses.Javali;
import Criatura.Subclasses.Lobo;
import Criatura.Subclasses.Jaguatirica;
import Criatura.Subclasses.Piranha;
import Criatura.Subclasses.Sanguessuga;
import Criatura.Subclasses.Jacare;
import Criatura.Subclasses.Urso;
import Criatura.Subclasses.Corvo;
import Criatura.Subclasses.Fantasma;

import Evento.Subclasses.EventoClimatico;
import Evento.Subclasses.EventoDescoberta;
import Evento.Subclasses.EventoDoencaFerimento;
import Evento.Subclasses.EventoCriatura;
import Evento.Subclasses.Espec√≠ficos.*;

import java.util.ArrayList;
import java.util.Random;
import java.util.List;
import java.util.HashMap;
import java.util.Map;
import javax.swing.*;

public class GerenciadorDeEventos {
    private ArrayList<Evento> eventosDisponiveis = new ArrayList<>();
    private ArrayList<String> historicoDeEventos = new ArrayList<>();
    private Random sorteador = new Random();


    private Map<String, List<Evento>> eventosPorAmbiente = new HashMap<>();

    public GerenciadorDeEventos() {
        inicializarEventosPorAmbiente();
    }

    public void adicionarEvento(Evento evento) {
        eventosDisponiveis.add(evento);
    }

    public void mostrarHistoricoDeEventos() {
        System.out.println("Hist√≥rico de eventos:");
        if (historicoDeEventos.isEmpty()) {
            System.out.println("Nenhum evento ocorreu at√© agora.");
        } else {
            for (String nome : historicoDeEventos) {
                System.out.println("- " + nome);
            }
        }
    }

    // M√©todo para CONSOLE (como voc√™ forneceu)
    public void aplicarEventoAleatorioPorAmbiente(Personagem jogador) {
        Ambiente ambienteAtual = jogador.getAmbienteAtual();
        if (ambienteAtual == null) {
            System.out.println("Erro: Ambiente atual do jogador n√£o definido para evento aleat√≥rio.");
            return;
        }
        String nomeClasseAmbiente = ambienteAtual.getClass().getSimpleName();
        List<Evento> eventos = eventosPorAmbiente.get(nomeClasseAmbiente);

        if (eventos == null || eventos.isEmpty()) {
            System.out.println("Voc√™ explora " + ambienteAtual.getNome() + ", mas nada acontece por aqui...\n");
            return;
        }

        if (sorteador.nextDouble() < 0.2) {
            System.out.println("Voc√™ explora com cautela... mas tudo est√° calmo em " + ambienteAtual.getNome() + ".\n");
            return;
        }

        Evento eventoEscolhido = eventos.get(sorteador.nextInt(eventos.size()));
        System.out.println("\nüî∏ Um evento inesperado acontece em " + ambienteAtual.getNome() + "...\n");
        eventoEscolhido.executar(jogador, ambienteAtual); // Chama o executar de console do evento
        historicoDeEventos.add(eventoEscolhido.getNomeEvento());
    }

    private void inicializarEventosPorAmbiente() {
        eventosPorAmbiente = new HashMap<>();

        eventosPorAmbiente.put("Caverna", new ArrayList<>(List.of(
                new EventoCriatura("Morcego Gigante", "Voc√™ escuta um chiado agudo... Um morcego enorme desce do teto em sua dire√ß√£o!", 0.5, "vida", "Caverna", new MorcegoGigante(), 1, "Ataque a√©reo"),
                new EventoCriatura("Rato Mutante", "Nos cantos escuros, um rato com olhos brilhantes avan√ßa rosnando. Algo est√° errado com ele.", 0.65, "vida", "Caverna", new RatoMutante(), 1, "Morde com toxinas"),
                new EventoDescoberta("F√≥ssil Luminoso", "Ao iluminar a parede com sua lanterna, voc√™ v√™ f√≥sseis que brilham com uma luz t√™nue e azulada.", 0.3, "inventario", "Caverna", "F√≥ssil", "Min√©rio luminoso", "Necess√°rio picareta"),
                new EventoDoencaFerimento("G√°s T√≥xico", "Ao avan√ßar, um g√°s verde come√ßa a sair de uma fenda no ch√£o. Voc√™ tenta prender a respira√ß√£o...", 0.35, "sanidade", "Caverna", "Respirat√≥rio", "Ant√≠doto raro"),
                new EventoClimatico("Desabamento", "Fragmentos de pedra come√ßam a cair do teto...", 0.5, "vida", "Caverna", "Queda de Rochas", 1, "Pode bloquear sa√≠das ou causar ferimentos graves"),
                new EventoDoencaFerimento("Espeleotermia", "O ar √∫mido e estagnado aquece de forma incomum...", 0.35, "energia", "Caverna", "T√©rmica", "Descanso imediato"),
                new EventoDescoberta("Cristais Sonoros", "Voc√™ ouve um leve som met√°lico vindo das rochas...", 0.3, "inventario", "Caverna", "Cristal", "Min√©rio luminoso", "Necess√°rio picareta")
        )));

        eventosPorAmbiente.put("Floresta", new ArrayList<>(List.of(
                new EventoCriatura("Cobra", "Entre os galhos baixos, uma cobra escorrega...", 0.5, "vida", "Floresta", new Cobra(), 1, "Veneno paralisante"),
                new EventoCriatura("Javali Selvagem", "Voc√™ escuta um grunhido e um javali investe!", 0.35, "vida", "Floresta", new Javali(), 2, "Investida poderosa"),
                new EmboscadaLobos(), // Evento Espec√≠fico
                new EventoDescoberta("Cabana Abandonada", "Em meio √† vegeta√ß√£o, surge uma antiga cabana...", 0.25, "inventario", "Floresta", "Abrigo", "Itens de sobreviv√™ncia", "Requer lanterna"),
                new EventoDoencaFerimento("Picada de Inseto Misterioso", "Insetos picam sua pele, causando ard√™ncia e febre.", 0.8, "vida", "Floresta", "Cut√¢nea", "Pomada natural"),
                new EventoCriatura("Jaguatirica Sorrateira", "Um som r√°pido nos galhos... A jaguatirica salta!", 0.6, "vida", "Floresta", new Jaguatirica(), 2, "Ataque antes de desaparecer"),

                new EventoClimatico("Chuva Torrencial na Floresta", "Gotas pesadas transformam a floresta em um lama√ßal.", 0.45, "energia", "Floresta", "Chuva Intensa", 1, "Movimenta√ß√£o reduzida"),
                new EventoDoencaFerimento("Contato com Erva T√≥xica", "Voc√™ ro√ßa em uma planta pegajosa e sente a pele arder.", 0.45, "vida", "Floresta", "Cut√¢nea", "Lavar com √°gua limpa"),
                new EventoDescoberta("Frutas Ex√≥ticas da Floresta", "Voc√™ encontra frutas de colora√ß√£o vibrante...", 0.7, "inventario", "Floresta", "Alimento", "Carne de Javali", "Verificar frescor") // "Carne de Javali" como recurso parece estranho para Frutas Ex√≥ticas, ajuste se necess√°rio.
        )));


        eventosPorAmbiente.put("LagoRio", new ArrayList<>(List.of(
                new EventoCriatura("Cardume de Piranhas", "Voc√™ pisa na √°gua e sente picadas r√°pidas!", 0.55, "vida", "LagoRio", new Piranha(), 1, "Ataque em cardume"),
                new EventoCriatura("Sanguessuga Gigante", "Algo viscoso gruda em sua perna na √°gua rasa!", 0.7, "energia", "LagoRio", new Sanguessuga(), 1, "Drena energia lentamente"),
                new EventoCriatura("Jacar√© das √Åguas Escuras", "A superf√≠cie do lago se rompe e um enorme jacar√© avan√ßa!", 0.65, "vida", "LagoRio", new Jacare(), 3, "Mordida surpresa"),
                new EventoDescoberta("Tesouro Submerso no Lago", "Na margem, algo met√°lico brilha sob a lama. Um ba√∫!", 0.3, "inventario", "LagoRio", "Tesouro", "Moedas antigas", "Requer nadar"),
                new EventoDoencaFerimento("Infec√ß√£o por √Ågua Contaminada", "Ao caminhar pelas √°guas turvas, sua pele co√ßa e feridas surgem.", 0.4, "vida", "LagoRio", "Cut√¢nea", "Carv√£o ativado"),
                new EnchenteRapida(),
                new EventoDescoberta("Concha Misteriosa do Rio", "Algo reluz entre as pedras submersas. Uma concha grande!", 0.4, "inventario", "LagoRio", "Rel√≠quia", "Artefato m√≠stico", "Somente se sanidade > 40"),
                new EventoClimatico("Nevoeiro Denso Sobre as √Åguas", "Uma n√©voa espessa cobre a √°gua, dificultando a vis√£o.", 0.55, "sanidade", "LagoRio", "Nevoeiro", 1, "Reduz visibilidade drasticamente")
        )));

        eventosPorAmbiente.put("Montanha", new ArrayList<>(List.of(
                new EventoCriatura("Lobo da Neve Astuto", "Camuflado no branco, um lobo o observa...", 0.55, "vida", "Montanha", new Lobo(), 2, "Camuflagem na neve"),
                new EventoCriatura("Urso das Geleiras", "Um rugido ecoa! Um urso colossal aparece!", 0.65, "vida", "Montanha", new Urso(), 3, "Golpe devastador"),
                new EventoDescoberta("Veio de Cristal Azul", "Entre as fendas geladas, um cristal azul reluz.", 0.4, "inventario", "Montanha", "Cristal", "Cristal m√°gico de luz azulada", "Necess√°rio ferramenta para extra√ß√£o"),
                new EventoDoencaFerimento("Hipotermia Severa", "O vento cortante e a altitude consomem sua for√ßa...", 0.4, "energia", "Montanha", "Clim√°tica", "Abrigo aquecido e fogo"),
                new TempestadeMontanha(), // Evento Espec√≠fico
                new EventoClimatico("Tempestade El√©trica Alpina", "O c√©u escurece. Rel√¢mpagos iluminam a neblina g√©lida.", 0.4, "vida", "Montanha", "Tempestade El√©trica", 2, "Risco de queimaduras ou atordoamento"),
                new EventoClimatico("Nevasca Implac√°vel", "Flocos de neve se transformam em uma nevasca que encobre tudo.", 0.7, "energia", "Montanha", "Nevasca", 2, "Reduz mobilidade e visibilidade")
        )));

        eventosPorAmbiente.put("Ruinas", new ArrayList<>(List.of(
                new EventoCriatura("Bando de Corvos Agourentos", "Corvos negros voam em c√≠rculos, soltando gritos perturbadores.", 0.5, "sanidade", "Ruinas", new Corvo(), 1, "Som hipn√≥tico"),
                new EventoCriatura("Apari√ß√£o Espectral", "O ar esfria e uma figura transl√∫cida cruza seu caminho.", 0.45, "sanidade", "Ruinas", new Fantasma(), 2, "Drena sua alma com um sussurro"),
                new EventoDescoberta("Rel√≠quia Sagrada Oculta", "Um brilho fraco entre escombros revela uma rel√≠quia antiga.", 0.35, "inventario", "Ruinas", "Rel√≠quia", "Artefato m√≠stico", "Somente se sanidade > 50"),
                new EventoDoencaFerimento("Corte Infectado nas Ru√≠nas", "Voc√™ trope√ßa e corta o bra√ßo em metal enferrujado.", 0.4, "vida", "Ruinas", "Corte", "Antibi√≥tico e bandagens"),
                new EventoClimatico("Ventos Cortantes das Ru√≠nas", "R√°fagas violentas varrem as ru√≠nas, carregando poeira e estilha√ßos.", 0.4, "vida", "Ruinas", "Tempestade de Detritos", 1, "Redu√ß√£o de visibilidade e risco de ferimentos"),
                new PoeiraToxica(), // Evento Espec√≠fico
                new EventoDescoberta("Inscri√ß√µes Antigas Decifradas", "Num pedestal coberto de musgo, inscri√ß√µes revelam segredos.", 0.4, "inventario", "Ruinas", "Artefato", "Conhecimento perdido", "Somente se sanidade > 60") // "Artefato m√≠stico" estava repetido, mudei para "Conhecimento perdido" como exemplo
        )));
    }


    public void aplicarEventoCriaturaDuranteDescanso(Personagem jogador) {
        Ambiente ambienteAtual = jogador.getAmbienteAtual();
        if (ambienteAtual == null) return;
        String nomeClasseAmbiente = ambienteAtual.getClass().getSimpleName();
        List<Evento> eventosDoAmbiente = eventosPorAmbiente.get(nomeClasseAmbiente);

        if (eventosDoAmbiente != null) {
            List<EventoCriatura> criaturasNoAmbiente = new ArrayList<>();
            for (Evento e : eventosDoAmbiente) {
                if (e instanceof EventoCriatura) {
                    criaturasNoAmbiente.add((EventoCriatura) e);
                }
            }

            if (!criaturasNoAmbiente.isEmpty()) {
                EventoCriatura eventoCriaturaEscolhido = criaturasNoAmbiente.get(sorteador.nextInt(criaturasNoAmbiente.size()));
                if (sorteador.nextDouble() < eventoCriaturaEscolhido.getProbabilidadeDeOcorrencia() * 0.5) { // Chance reduzida durante descanso
                    eventoCriaturaEscolhido.executarDuranteDescanso(jogador, ambienteAtual);
                    historicoDeEventos.add(eventoCriaturaEscolhido.getNomeEvento());
                }
            }
        }
    }

    public void aplicarEventoClimaticoDuranteDescanso(Personagem jogador) {
        Ambiente ambienteAtual = jogador.getAmbienteAtual();
        if (ambienteAtual == null) return;
        String nomeClasseAmbiente = ambienteAtual.getClass().getSimpleName();
        List<Evento> eventosDoAmbiente = eventosPorAmbiente.get(nomeClasseAmbiente);

        if (eventosDoAmbiente != null) {
            List<EventoClimatico> climaticosNoAmbiente = new ArrayList<>();
            for (Evento e : eventosDoAmbiente) {
                if (e instanceof EventoClimatico) {
                    climaticosNoAmbiente.add((EventoClimatico) e);
                }
            }

            if (!climaticosNoAmbiente.isEmpty()) {
                EventoClimatico eventoEscolhido = climaticosNoAmbiente.get(sorteador.nextInt(climaticosNoAmbiente.size()));
                if (sorteador.nextDouble() < eventoEscolhido.getProbabilidadeDeOcorrencia() * 0.6) { // Chance um pouco maior para clima
                    System.out.println("\nüî∏ O clima muda repentinamente durante o descanso!\n");
                    eventoEscolhido.executar(jogador, ambienteAtual);
                    historicoDeEventos.add(eventoEscolhido.getNomeEvento());
                }
            }
        }
    }

    // ---- M√âTODOS PARA INTERFACE GR√ÅFICA ----

    public void aplicarEventoAdversoInterface(Personagem jogador, JTextArea areaLog) {
        int chance = sorteador.nextInt(100);

        if (chance < 15) {
            jogador.diminuirVida(10);
            areaLog.append("Voc√™ pisou em uma armadilha escondida! (-10 de vida)\n");
        } else if (chance < 30) {
            jogador.diminuirSanidade(15);
            areaLog.append("O ambiente te deixou perturbado... (-15 de sanidade)\n");
        } else if (chance < 40) {
            jogador.diminuirEnergia(20);
            areaLog.append("Voc√™ se esfor√ßou demais e est√° exausto. (-20 de energia)\n");
        } else {
            areaLog.append("Nenhum pequeno imprevisto ocorreu desta vez.\n");
        }
    }

    public void dispararEventoExploracaoInterface(Personagem jogador, JTextArea areaLog) {
        Ambiente ambienteAtual = jogador.getAmbienteAtual();
        if (ambienteAtual == null) {
            areaLog.append("Erro: Ambiente atual do jogador n√£o definido.\n");
            return;
        }
        String nomeClasseAmbiente = ambienteAtual.getClass().getSimpleName();
        List<Evento> eventosDoAmbiente = eventosPorAmbiente.get(nomeClasseAmbiente);

        if (eventosDoAmbiente == null || eventosDoAmbiente.isEmpty()) {
            areaLog.append("Voc√™ explora " + ambienteAtual.getNome() + ", mas nada acontece por aqui...\n");
            return;
        }


        if (sorteador.nextDouble() < 0.30) {
            areaLog.append("Voc√™ explora com aten√ß√£o... mas o ambiente " + ambienteAtual.getNome() + " parece calmo no momento.\n");

            if (sorteador.nextDouble() < 0.25) { // 25% de chance de um pequeno evento adverso
                aplicarEventoAdversoInterface(jogador, areaLog);
            }
            return;
        }

        Evento eventoEscolhido = eventosDoAmbiente.get(sorteador.nextInt(eventosDoAmbiente.size()));

        if (sorteador.nextDouble() < eventoEscolhido.getProbabilidadeDeOcorrencia()) {
            areaLog.append("\nüî∏ Algo inesperado acontece durante sua explora√ß√£o em " + ambienteAtual.getNome() + "...\n");

            if (eventoEscolhido instanceof EventoClimatico) {
                ((EventoClimatico) eventoEscolhido).executarInterface(jogador, ambienteAtual, areaLog);
            } else if (eventoEscolhido instanceof EventoCriatura) {
                ((EventoCriatura) eventoEscolhido).executarInterface(jogador, ambienteAtual, areaLog);
            } else if (eventoEscolhido instanceof EventoDescoberta) {
                ((EventoDescoberta) eventoEscolhido).executarInterface(jogador, ambienteAtual, areaLog);
            } else if (eventoEscolhido instanceof EventoDoencaFerimento) {
                ((EventoDoencaFerimento) eventoEscolhido).executarInterface(jogador, ambienteAtual, areaLog);
            } else {
                areaLog.append("Evento (gen√©rico): " + eventoEscolhido.getNomeEvento() + "\n");
                areaLog.append(eventoEscolhido.getDescricao() + "\n");

            }
            historicoDeEventos.add(eventoEscolhido.getNomeEvento());
        } else {
            areaLog.append("Voc√™ sentiu que algo poderia acontecer em " + ambienteAtual.getNome() +", mas o perigo passou... por ora.\n");
            if (sorteador.nextDouble() < 0.15) { // Opcional: pequena chance de evento adverso menor
                aplicarEventoAdversoInterface(jogador, areaLog);
            }
        }
    }

    public void aplicarEventoDuranteDescansoInterface(Personagem jogador, Ambiente ambienteAtual, JTextArea areaLog) {
        if (ambienteAtual == null) {
            areaLog.append("Erro: Ambiente atual do jogador n√£o definido para evento de descanso.\n");
            return;
        }

        String nomeClasseAmbiente = ambienteAtual.getClass().getSimpleName();
        List<Evento> eventosDoAmbiente = eventosPorAmbiente.get(nomeClasseAmbiente);
        boolean algumEventoOcorreu = false;

        if (eventosDoAmbiente == null || eventosDoAmbiente.isEmpty()) {
            areaLog.append("Seu descanso foi tranquilo (nenhum evento espec√≠fico para este ambiente).\n");
            return;
        }

        List<EventoCriatura> criaturasNoAmbiente = new ArrayList<>();
        for (Evento ev : eventosDoAmbiente) {
            if (ev instanceof EventoCriatura) {
                criaturasNoAmbiente.add((EventoCriatura) ev);
            }
        }
        if (!criaturasNoAmbiente.isEmpty()) {
            if (sorteador.nextDouble() < 0.30) { // 30% de chance de encontro com criatura
                EventoCriatura eventoCriaturaEscolhido = criaturasNoAmbiente.get(sorteador.nextInt(criaturasNoAmbiente.size()));
                if (sorteador.nextDouble() < eventoCriaturaEscolhido.getProbabilidadeDeOcorrencia()) {
                    eventoCriaturaEscolhido.executarDuranteDescansoInterface(jogador, ambienteAtual, areaLog);
                    historicoDeEventos.add(eventoCriaturaEscolhido.getNomeEvento());
                    algumEventoOcorreu = true;
                }
            }
        }

        if (!algumEventoOcorreu) {
            List<EventoClimatico> climaticosNoAmbiente = new ArrayList<>();
            for (Evento ev : eventosDoAmbiente) {
                if (ev instanceof EventoClimatico) {
                    climaticosNoAmbiente.add((EventoClimatico) ev);
                }
            }
            if (!climaticosNoAmbiente.isEmpty()) {
                if (sorteador.nextDouble() < 0.25) { // 25% de chance de evento clim√°tico
                    EventoClimatico eventoClimaticoEscolhido = climaticosNoAmbiente.get(sorteador.nextInt(climaticosNoAmbiente.size()));
                    if (sorteador.nextDouble() < eventoClimaticoEscolhido.getProbabilidadeDeOcorrencia()) {
                        areaLog.append("\nüî∏ O clima muda repentinamente durante o seu descanso!\n");

                        eventoClimaticoEscolhido.executarInterface(jogador, ambienteAtual, areaLog);
                        historicoDeEventos.add(eventoClimaticoEscolhido.getNomeEvento());
                        algumEventoOcorreu = true;
                    }
                }
            }
        }


        if (!algumEventoOcorreu && sorteador.nextDouble() < 0.15) {
            aplicarEventoAdversoInterface(jogador, areaLog);
            algumEventoOcorreu = true;
        }

        if (!algumEventoOcorreu) {
            areaLog.append("Seu descanso foi tranquilo e revigorante desta vez.\n");
        }
    }
}
