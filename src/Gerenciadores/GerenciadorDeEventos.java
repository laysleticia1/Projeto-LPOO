package Gerenciadores;

import Evento.Superclasse.Evento;
import Personagem.Superclasse.Personagem;
import Ambiente.Superclasse.Ambiente;
import Criatura.Subclasses.*;
import Evento.Subclasses.EventoClimatico;
import Evento.Subclasses.EventoDescoberta;
import Evento.Subclasses.EventoDoencaFerimento;
import Evento.Subclasses.Espec√≠ficos.*;
import Evento.Subclasses.EventoCriatura;

import java.util.ArrayList;
import java.util.Random;
import java.util.List;
import java.util.HashMap;
import java.util.Map;

import javax.swing.*;

public class GerenciadorDeEventos {
    private ArrayList<Evento> eventosDisponiveis = new ArrayList<>();
    private ArrayList<String> historicoDeEventos = new ArrayList<>();
    private Random sorteador = new Random();

    public void adicionarEvento(Evento evento) {
        eventosDisponiveis.add(evento);
    }

    public void mostrarHistoricoDeEventos() {
        System.out.println("Hist√≥rico de eventos:");
        if (historicoDeEventos.isEmpty()) {
            System.out.println("Nenhum evento ocorreu at√© agora.");
        } else {
            for (String nome : historicoDeEventos) {
                System.out.println("- " + nome);
            }
        }
    }

    public void aplicarEventoAleatorioPorAmbiente(Personagem jogador) {
        String nomeAmbiente = jogador.getAmbienteAtual().getClass().getSimpleName();
        List<Evento> eventos = eventosPorAmbiente.get(nomeAmbiente);

        if (eventos == null || eventos.isEmpty()) {
            System.out.println("Voc√™ explora, mas nada acontece por aqui...\n");
            return;
        }

        // 20% de chance de nenhum evento acontecer
        if (new Random().nextDouble() < 0.2) {
            System.out.println("Voc√™ explora com cautela... mas tudo est√° calmo.\n");
            return;
        }

        Evento eventoEscolhido = eventos.get(new Random().nextInt(eventos.size()));
        System.out.println("\nüî∏ Um evento inesperado acontece...\n");
        eventoEscolhido.executar(jogador, jogador.getAmbienteAtual());
        historicoDeEventos.add(eventoEscolhido.getNomeEvento());
    }

    private Map<String, List<Evento>> eventosPorAmbiente = new HashMap<>();

    public GerenciadorDeEventos() {
        inicializarEventosPorAmbiente();
    }

    private void inicializarEventosPorAmbiente() {
        eventosPorAmbiente = new HashMap<>();

        eventosPorAmbiente.put("Caverna", new ArrayList<>(List.of(
                new EventoCriatura("Morcego Gigante", "Voc√™ escuta um chiado agudo... Um morcego enorme desce do teto em sua dire√ß√£o!", 0.5, "vida", "Caverna", new MorcegoGigante(), 1, "Ataque a√©reo"),
                new EventoCriatura("Rato Mutante", "Nos cantos escuros, um rato com olhos brilhantes avan√ßa rosnando. Algo est√° errado com ele.", 0.4, "vida", "Caverna", new RatoMutante(), 1, "Morde com toxinas"),
                new EventoDescoberta("F√≥ssil Luminoso", "Ao iluminar a parede com sua lanterna, voc√™ v√™ f√≥sseis que brilham com uma luz t√™nue e azulada.", 0.4, "inventario", "Caverna", "F√≥ssil", "Min√©rio luminoso", "Necess√°rio picareta"),
                new EventoDoencaFerimento("G√°s T√≥xico", "Ao avan√ßar, um g√°s verde come√ßa a sair de uma fenda no ch√£o. Voc√™ tenta prender a respira√ß√£o...", 0.5, "sanidade", "Caverna", "Respirat√≥rio", "Ant√≠doto raro"),
                new EventoClimatico("Desabamento", "Fragmentos de pedra come√ßam a cair do teto... um som surdo antecede o caos. As paredes tremem e a escurid√£o √© engolida por poeira e pedras.", 0.3, "vida", "Caverna", "Queda de Rochas", 1, "Pode bloquear sa√≠das ou causar ferimentos graves"),
                new EventoDoencaFerimento("Espeleotermia", "O ar √∫mido e estagnado aquece de forma incomum, fazendo voc√™ suar intensamente e sentir tonturas.", 0.4, "energia", "Caverna", "T√©rmica", "Descanso imediato"),
                new EventoDescoberta("Cristais Sonoros", "Voc√™ ouve um leve som met√°lico vindo das rochas. Ao tocar, descobre pequenos cristais que vibram com o som.", 0.3, "inventario", "Caverna", "Cristal", "Min√©rio luminoso", "Necess√°rio picareta")
        )));

        eventosPorAmbiente.put("Floresta", new ArrayList<>(List.of(
                new EventoCriatura("Cobra", "Entre os galhos baixos, uma cobra escorrega at√© quase tocar seus p√©s. √â venenosa!", 0.3, "vida", "Floresta", new Cobra(), 1, "Veneno paralisante"),
                new EventoCriatura("Javali", "Voc√™ escuta um grunhido e, antes que possa reagir, um javali investe com f√∫ria pela trilha!", 0.3, "vida", "Floresta", new Javali(), 2, "Investida poderosa"),
                new EventoCriatura("Lobo", "Olhos brilhantes entre as √°rvores. Um lobo surge e rosna ferozmente... ele n√£o est√° sozinho.", 0.4, "vida", "Floresta", new Lobo(), 2, "Ataca em bando"),
                new EventoDescoberta("Cabana Abandonada", "Em meio √† vegeta√ß√£o, surge a silhueta de uma antiga cabana. L√° dentro, vest√≠gios de sobreviventes.", 0.5, "inventario", "Floresta", "Abrigo", "Itens de sobreviv√™ncia", "Requer lanterna"),
                new EventoDoencaFerimento("Picada de Inseto", "Insetos quase impercept√≠veis picam sua pele, causando uma ard√™ncia intensa e febre.", 0.4, "vida", "Floresta", "Cut√¢nea", "Pomada natural"),
                new EventoCriatura("Emboscada de Jaguatirica", "Um som r√°pido nos galhos acima... A jaguatirica salta e tenta atacar antes de desaparecer na mata!", 0.5, "vida", "Floresta", new Jaguatirica(), 2, "Ataque antes de desaparecer"),
                new EnchenteRapida(),
                new PoeiraToxica(),
                new EmboscadaLobos(),
                new EventoClimatico("Chuva Torrencial", "Gotas pesadas come√ßam a cair. Em instantes, a floresta se transforma em um lama√ßal escorregadio e escuro. Seus passos afundam no barro.", 0.3, "energia", "Floresta", "Chuva Intensa", 1, "Movimenta√ß√£o reduzida e risco de quedas"),
                new EventoDoencaFerimento("Erva T√≥xica", "Sem perceber, voc√™ ro√ßa em uma planta coberta de uma subst√¢ncia pegajosa. Pouco depois, sente a pele arder.", 0.3, "vida", "Floresta", "Cut√¢nea", "Lavar com √°gua limpa"),
                new EventoDescoberta("Frutas Ex√≥ticas", "Entre os arbustos, voc√™ encontra frutas de colora√ß√£o vibrante. Parecem nutritivas, mas exalam um cheiro estranho.", 0.5, "inventario", "Floresta", "Alimento", "Carne de Javali", "Verificar frescor")
        )));

        eventosPorAmbiente.put("LagoRio", new ArrayList<>(List.of(
                new EventoCriatura("Piranha", "Voc√™ pisa na √°gua e logo sente picadas r√°pidas. Piranhas famintas cercam seus p√©s!", 0.4, "vida", "LagoRio", new Piranha(), 1, "Ataque em cardume"),
                new EventoCriatura("Sanguessuga", "Algo viscoso gruda em sua perna enquanto voc√™ caminha na √°gua rasa. Est√° sugando sua energia!", 0.4, "vida", "LagoRio", new Sanguessuga(), 1, "Drena energia lentamente"),
                new EventoCriatura("Jacar√©", "A superf√≠cie do lago se rompe e um enorme jacar√© avan√ßa das √°guas escuras!", 0.5, "vida", "LagoRio", new Jacare(), 3, "Mordida surpresa"),
                new EventoDescoberta("Tesouro Submerso", "Na margem, algo met√°lico brilha sob a lama. Um ba√∫ antigo!", 0.4, "inventario", "LagoRio", "Tesouro", "Moedas antigas", "Requer nadar"),
                new EventoDoencaFerimento("√Ågua Contaminada", "Ao caminhar pelas √°guas turvas do lago, sua pele come√ßa a co√ßar intensamente. Logo surgem feridas ardentes ‚Äî a contamina√ß√£o penetrou pelos poros. A dor √© imediata, e a √°gua est√° longe de ser segura.", 0.3, "vida", "LagoRio", "Cut√¢nea", "Carv√£o ativado"),
                new EventoClimatico("Cheia S√∫bita", "Voc√™ ouve um rugido distante... e logo percebe: a correnteza ganha for√ßa! Uma enxurrada desce das montanhas, inundando tudo ao redor!", 0.3, "energia", "LagoRio", "Inunda√ß√£o", 1, "Movimenta√ß√£o severamente dificultada"),
                new EventoDescoberta("Concha Misteriosa", "Algo reluz entre as pedras submersas. Ao puxar, √© uma concha grande com padr√µes desconhecidos.", 0.4, "inventario", "LagoRio", "Rel√≠quia", "Artefato m√≠stico", "Somente se sanidade > 40"),
                new EventoClimatico("Nevoeiro Denso", "Uma n√©voa espessa se espalha pela superf√≠cie da √°gua, tornando dif√≠cil enxergar at√© poucos metros √† frente.", 0.3, "sanidade", "LagoRio", "Nevoeiro", 1, "Reduz visibilidade drasticamente")
        )));

        eventosPorAmbiente.put("Montanha", new ArrayList<>(List.of(
                new EventoCriatura("Lobo da Neve", "Camuflado no branco da montanha, um lobo o observa antes de se aproximar lentamente.", 0.4, "vida", "Montanha", new Lobo(), 2, "Camuflagem na neve"),
                new EventoCriatura("Urso", "O sil√™ncio √© rompido por um rugido. Um urso colossal aparece entre as rochas!", 0.5, "vida", "Montanha", new Urso(), 3, "Golpe devastador"),
                new EventoDescoberta("Cristal Azul Brilhante", "Entre as fendas geladas da montanha, um cristal azul reluz com intensidade, refletindo a luz do sol nas encostas nevadas.", 0.5, "inventario", "Montanha", "Cristal", "Cristal m√°gico de luz azulada", "Necess√°rio ferramenta para extra√ß√£o"),
                new EventoDoencaFerimento("Frio Extremo", "O vento cortante e a altitude consomem sua for√ßa. Voc√™ sente o corpo congelar...", 0.4, "energia", "Montanha", "Clim√°tica", "Abrigo aquecido"),
                new TempestadeMontanha(),
                new EventoClimatico("Tempestade El√©trica", "O c√©u escurece repentinamente. Rel√¢mpagos iluminam a neblina g√©lida, e trov√µes explodem nas montanhas. Um raio atinge pr√≥ximo a voc√™!", 0.4, "vida", "Montanha", "Tempestade El√©trica", 2, "Pode causar queimaduras ou atordoamento"),
                new EventoClimatico("Nevasca S√∫bita", "Flocos de neve aumentam repentinamente, se transformando em uma nevasca que encobre seus passos e dificulta a respira√ß√£o.", 0.4, "energia", "Montanha", "Nevasca", 2, "Reduz mobilidade e visibilidade")
        )));

        eventosPorAmbiente.put("Ruinas", new ArrayList<>(List.of(
                new EventoCriatura("Corvo", "Um corvo negro voa em c√≠rculos sobre voc√™, soltando gritos perturbadores. √â como se te seguisse.", 0.3, "sanidade", "Ruinas", new Corvo(), 1, "Som hipn√≥tico"),
                new EventoCriatura("Fantasma", "O ar esfria e uma figura transl√∫cida cruza seu caminho, sussurrando palavras indecifr√°veis.", 0.4, "sanidade", "Ruinas", new Fantasma(), 2, "Drena sua alma com um sussurro"),
                new EventoDescoberta("Rel√≠quia Sagrada", "Um brilho fraco surge entre escombros. Voc√™ se aproxima e encontra uma rel√≠quia antiga...", 0.5, "inventario", "Ruinas", "Rel√≠quia", "Artefato m√≠stico", "Somente se sanidade > 50"),
                new EventoDoencaFerimento("T√©tano", "Voc√™ trope√ßa e corta o bra√ßo em uma viga enferrujada. A ferida come√ßa a latejar...", 0.4, "vida", "Ruinas", "Corte", "Antibi√≥tico"),
                new EventoClimatico("Vento Cortante", "R√°fagas violentas varrem as ru√≠nas, carregando poeira, estilha√ßos e gr√£os finos que cortam como l√¢minas sua pele e vis√£o.", 0.3, "vida", "Ruinas", "Tempestade de Areia", 1, "Redu√ß√£o severa de visibilidade e risco de ferimentos"),
                new EventoDoencaFerimento("Poeira Antiga", "Ao abrir uma porta de pedra, uma nuvem de poeira antiga invade seus pulm√µes, causando tosse e tontura.", 0.3, "sanidade", "Ruinas", "Respirat√≥rio", "Ant√≠doto raro"),
                new EventoDescoberta("Inscri√ß√µes Perdidas", "Num pedestal coberto de musgo, voc√™ encontra inscri√ß√µes quase apagadas que falam de um antigo ritual.", 0.4, "inventario", "Ruinas", "Artefato", "Artefato m√≠stico", "Somente se sanidade > 60")
        )));
    }

    public void aplicarEventoCriaturaDuranteDescanso(Personagem jogador) {
        String nomeAmbiente = jogador.getAmbienteAtual().getClass().getSimpleName();
        List<Evento> eventos = eventosPorAmbiente.get(nomeAmbiente);

        if (eventos != null) {
            List<Evento> criaturas = new ArrayList<>();

            for (Evento e : eventos) {
                if (e instanceof EventoCriatura) {
                    criaturas.add(e);
                }
            }

            if (!criaturas.isEmpty()) {
                Evento eventoBase = criaturas.get(new Random().nextInt(criaturas.size()));
                if (eventoBase instanceof EventoCriatura eventoCriatura) {
                    eventoCriatura.executarDuranteDescanso(jogador, jogador.getAmbienteAtual());
                    historicoDeEventos.add(eventoCriatura.getNomeEvento());
                }
            }
        }
    }

    public void aplicarEventoClimaticoDuranteDescanso(Personagem jogador) {
        String nomeAmbiente = jogador.getAmbienteAtual().getClass().getSimpleName();
        List<Evento> eventos = eventosPorAmbiente.get(nomeAmbiente);

        if (eventos != null) {
            List<Evento> climaticos = new ArrayList<>();

            for (Evento e : eventos) {
                if (e instanceof EventoClimatico) {
                    climaticos.add(e);
                }
            }

            if (!climaticos.isEmpty()) {
                Evento eventoEscolhido = climaticos.get(new Random().nextInt(climaticos.size()));
                System.out.println("\nüî∏ O clima muda repentinamente durante o descanso!\n");
                eventoEscolhido.executar(jogador, jogador.getAmbienteAtual());
                historicoDeEventos.add(eventoEscolhido.getNomeEvento());
            }
        }
    }

    //Interface
    public void aplicarEventoInterface(Personagem jogador, JTextArea areaLog) {
        Random random = new Random();
        int chance = random.nextInt(100);

        if (chance < 15) {
            jogador.diminuirVida(10);
            areaLog.append("Voc√™ pisou em uma armadilha escondida! (-10 de vida)\n");
        } else if (chance < 30) {
            jogador.diminuirSanidade(15);
            areaLog.append("O ambiente te deixou perturbado... (-15 de sanidade)\n");
        } else if (chance < 40) {
            jogador.diminuirEnergia(20);
            areaLog.append("Voc√™ se esfor√ßou demais e est√° exausto. (-20 de energia)\n");
        } else {
            areaLog.append("Nenhum evento adverso ocorreu desta vez.\n");
        }
    }

    public void aplicarEventoDuranteDescansoInterface(Personagem jogador, Ambiente ambienteAtual, JTextArea areaLog) {
        for (Evento evento : eventosDisponiveis) {
            if (evento instanceof EventoCriatura criatura) {
                if (criatura.podeOcorrerNoAmbiente(ambienteAtual)) {
                    if (new Random().nextDouble() < evento.getProbabilidadeDeOcorrencia()) {
                        criatura.executarDuranteDescansoInterface(jogador, ambienteAtual, areaLog);
                        break;
                    }
                }
            }
        }
    }
}
