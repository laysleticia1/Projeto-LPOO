package Evento.Subclasses;

import Evento.Superclasse.Evento;
import Personagem.Superclasse.Personagem;
import Ambiente.Superclasse.Ambiente;
import Ambiente.Subclasses.*;
import java.util.Scanner;
import Item.Superclasse.*;
import Item.Subclasses.*;

import javax.swing.*;

public class EventoDescoberta extends Evento {
    private String tipoDeDescoberta;
    private String recursosEncontrados;
    private String condicaoEspecial;

    public EventoDescoberta(String nome, String descricao, double probabilidadeDeOcorrencia, String impacto, String condicaoAtivacao, String tipoDeDescoberta, String recursosEncontrados, String condicaoEspecial ) {
        super(nome, descricao, probabilidadeDeOcorrencia, impacto, condicaoAtivacao);
        this.tipoDeDescoberta = tipoDeDescoberta;
        this.recursosEncontrados = recursosEncontrados;
        this.condicaoEspecial = condicaoEspecial;
    }

    @Override
    public void executar(Personagem jogador, Ambiente local) {
        System.out.println("\nüîé Evento de Descoberta: " + getNomeEvento());
        System.out.println(getDescricao());
        System.out.println("Tipo de Descoberta: " + tipoDeDescoberta);
        System.out.println("Recursos: " + recursosEncontrados);

        if (getImpacto().equalsIgnoreCase("inventario")) {
            Item itemDescoberto = null;

            // Cria√ß√£o do item com base no recurso encontrado
            switch (recursosEncontrados.toLowerCase()) {
                case "min√©rio luminoso":
                    itemDescoberto = new Material("Min√©rio Luminoso", "Cristal", 1.0, 1, 85);
                    break;
                case "itens de sobreviv√™ncia":
                    itemDescoberto = new Remedios("Kit de Sobreviv√™ncia", "Emergencial", "Recupera parcialmente fome e energia");
                    break;
                case "moedas antigas":
                    itemDescoberto = new Material("Moedas Antigas", "Tesouro", 0.4, 1, 100);
                    break;
                case "artefato m√≠stico":
                    itemDescoberto = new Material("Artefato M√≠stico", "Rel√≠quia", 2.0, 1, 95);
                    break;
                case "f√≥ssil luminoso":
                    itemDescoberto = new Material("F√≥ssil Luminoso", "Cristal", 1.2, 1, 70);
                    break;
                case "carne de javali":
                    itemDescoberto = new Alimentos("Carne de Javali", 0.6, 60, 25, "Carne", 4);
                    break;
                case "abrigo":
                    itemDescoberto = new Material("Abrigo Port√°til", "Abrigo", 1.5, 1, 80);
                    break;
                case "cristal":
                    itemDescoberto = new Material("Cristal Vibrante", "Cristal", 1.0, 1, 90);
                    break;
                case "rel√≠quia":
                    itemDescoberto = new Material("Rel√≠quia Antiga", "Rel√≠quia", 1.5, 1, 98);
                    break;
                case "alimento":
                    itemDescoberto = new Alimentos("Fruta Ex√≥tica", 0.3, 40, 15, "Fruta", 2);
                    break;
                case "artefato":
                    itemDescoberto = new Material("Artefato Ritual√≠stico", "Artefato", 1.8, 1, 92);
                    break;
                case "tesouro":
                    itemDescoberto = new Material("Ba√∫ de Tesouro", "Tesouro", 3.0, 1, 100);
                    break;
                case "cristal m√°gico de luz azulada":
                    itemDescoberto = new Material("Cristal Azul Brilhante", "Cristal", 1.0, 1, 95);
                    break;
                default:
                    System.out.println("Nada √∫til foi encontrado nesta descoberta.");
                    return;
            }

            System.out.println("\nVoc√™ encontrou: " + itemDescoberto.getNome());
            System.out.print("Deseja adicionar este item ao seu invent√°rio? (s/n): ");
            Scanner scanner = new Scanner(System.in);
            String resposta = scanner.nextLine().trim().toLowerCase();

            if (resposta.equals("s") || resposta.equals("sim")) {
                jogador.adicionarAoInventario(itemDescoberto);
                System.out.println("‚úÖ Item adicionado com sucesso ao invent√°rio!");

            } else {
                System.out.println("Voc√™ optou por deixar o item para tr√°s.");
            }
        }
    }

    public boolean podeOcorrerNoAmbiente(Ambiente ambiente) {
        return ambiente instanceof Ruinas;
    }

    //Interface
    public void executarInterface(Personagem jogador, Ambiente local, JTextArea areaLog) {
        areaLog.append("Durante sua jornada, algo incomum chama sua aten√ß√£o...\n");

        Item item = gerarItemDescoberta();

        if (item == null) {
            areaLog.append("‚ùå Voc√™ encontrou algo, mas n√£o conseguiu identificar o que era.\n");
            return;
        }

        areaLog.append("Voc√™ encontrou: " + item.getNome() + "\n");

        int escolha = JOptionPane.showConfirmDialog(null,
                "Deseja adicionar este item ao seu invent√°rio?",
                "Item Encontrado",
                JOptionPane.YES_NO_OPTION);

        if (escolha == JOptionPane.YES_OPTION) {
            try {
                jogador.adicionarAoInventario(item);
                areaLog.append("‚úîÔ∏è Item adicionado ao invent√°rio com sucesso!\n");
            } catch (Exception e) {
                areaLog.append("‚ùå N√£o foi poss√≠vel adicionar o item: " + e.getMessage() + "\n");
            }
        } else {
            areaLog.append("Voc√™ deixou o item para tr√°s.\n");
        }
    }


    public Item gerarItemDescoberta() {
        Item itemDescoberto;
        switch (recursosEncontrados.toLowerCase()) {
            case "min√©rio luminoso":
                itemDescoberto = new Material("Min√©rio Luminoso", "Cristal", 1.0, 1, 85);
                break;
            case "itens de sobreviv√™ncia":
                itemDescoberto = new Remedios("Kit de Sobreviv√™ncia", "Emergencial", "Recupera parcialmente fome e energia");
                break;
            case "moedas antigas":
                itemDescoberto = new Material("Moedas Antigas", "Tesouro", 0.4, 1, 100);
                break;
            case "artefato m√≠stico":
                itemDescoberto = new Material("Artefato M√≠stico", "Rel√≠quia", 2.0, 1, 95);
                break;
            case "f√≥ssil luminoso":
                itemDescoberto = new Material("F√≥ssil Luminoso", "Cristal", 1.2, 1, 70);
                break;
            case "carne de javali":
                itemDescoberto = new Alimentos("Carne de Javali", 0.6, 60, 25, "Carne", 4);
                break;
            case "abrigo":
                itemDescoberto = new Material("Abrigo Port√°til", "Abrigo", 1.5, 1, 80);
                break;
            case "cristal":
                itemDescoberto = new Material("Cristal Vibrante", "Cristal", 1.0, 1, 90);
                break;
            case "rel√≠quia":
                itemDescoberto = new Material("Rel√≠quia Antiga", "Rel√≠quia", 1.5, 1, 98);
                break;
            case "alimento":
                itemDescoberto = new Alimentos("Fruta Ex√≥tica", 0.3, 40, 15, "Fruta", 2);
                break;
            case "artefato":
                itemDescoberto = new Material("Artefato Ritual√≠stico", "Artefato", 1.8, 1, 92);
                break;
            case "tesouro":
                itemDescoberto = new Material("Ba√∫ de Tesouro", "Tesouro", 3.0, 1, 100);
                break;
            case "cristal m√°gico de luz azulada":
                itemDescoberto = new Material("Cristal Azul Brilhante", "Cristal", 1.0, 1, 95);
                break;
            default:
                return null;
        }
        return itemDescoberto;
    }
}
