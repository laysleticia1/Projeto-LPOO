package Evento.Subclasses.Espec√≠ficos;

import Criatura.Subclasses.Lobo;
import Evento.Subclasses.EventoCriatura;
import Personagem.Superclasse.Personagem;
import Ambiente.Superclasse.Ambiente;

import javax.swing.*;

public class EmboscadaLobos extends EventoCriatura {

    public EmboscadaLobos() {
        // Para new Lobo() funcionar, a classe Lobo deve existir em Criatura.Subclasses
        // e ter um construtor que n√£o requer argumentos, ou os argumentos corretos devem ser passados.
        // Se Lobo tiver apenas o construtor (String tipo, String nivelPerigo, String acoes),
        // voc√™ precisar√° fazer: new Lobo("Lobo Comum", "M√©dio", "Uivar, Morder, Cercar") por exemplo.
        // Assumindo que Lobo() tem um construtor padr√£o que define esses valores:
        super("Emboscada de Lobos", "Uma alcateia de lobos famintos salta dos arbustos, cercando voc√™.", 0.6, "vida e sanidade", "Floresta", new Lobo(), 3, "Lutar, fugir ou se esconder");
    }

    @Override
    public void executar(Personagem jogador, Ambiente local) {
        System.out.println("Evento: " + getNomeEvento());
        System.out.println(getDescricao());
        // A l√≥gica de intera√ß√£o com a criatura (lobos) j√° est√° na superclasse EventoCriatura.
        // Se esta emboscada tem uma mec√¢nica *diferente* da EventoCriatura gen√©rica,
        // essa l√≥gica espec√≠fica entraria aqui.
        // Caso contr√°rio, se a intera√ß√£o √© a mesma, voc√™ pode chamar super.executar()
        // ou replicar/modificar a l√≥gica de intera√ß√£o aqui.
        // A implementa√ß√£o original apenas aplicava dano direto, o que √© mais simples:
        System.out.println("Criatura: Lobos famintos");
        jogador.diminuirVida(12);
        jogador.diminuirSanidade(5); // Ajustado para usar o m√©todo de Personagem
        System.out.println("Voc√™ recebeu 12 de dano e perdeu 5 de sanidade.");
    }

    @Override
    public boolean podeOcorrerNoAmbiente(Ambiente ambiente) {
        return ambiente.getNome().equalsIgnoreCase("Floresta");
    }

    //Interface
    @Override
    public void executarInterface(Personagem jogador, Ambiente local, JTextArea areaLog) {
        areaLog.append("üê∫ Evento: " + getNomeEvento() + "\n");
        areaLog.append(getDescricao() + "\n");
        // Similar ao executar(), se a intera√ß√£o da superclasse EventoCriatura for desejada,
        // chame super.executarInterface(jogador, local, areaLog);
        // Se for um resultado direto:
        areaLog.append("Criatura: Lobos famintos\n");
        jogador.diminuirVida(12);
        jogador.diminuirSanidade(5); // Ajustado
        areaLog.append("Voc√™ recebeu 12 de dano e perdeu 5 de sanidade.\n");
    }
}
